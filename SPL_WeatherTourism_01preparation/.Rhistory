#count total number of sunny days in time period
sum(weather_daily$sunny)
#cloudy days (cloud coverage above 7.75 on okta scale)
weather_daily$cloudy = sapply(weather_daily$NM, FUN = function(x) ifelse(x > 7.75, 1, 0))
#count total number of cloudy days in time period
sum(weather_daily$cloudy)
#percentage of rainy days
sum(weather_daily$rainy)(nrow(weather_daily))
#percentage of rainy days
sum(weather_daily$rainy)/(nrow(weather_daily))
nrow(weather_daily)
nrow(weather_daily)/365
#percentage of rainy days
sum(weather_daily$rainy)/(nrow(weather_daily))
#sunny days (sunshine hours above 10 hours a day)
weather_daily$sunny = sapply(weather_daily$SDK, FUN = function(x) ifelse(x > 10, 1, 0))
#count total number of sunny days in time period
sum(weather_daily$sunny)
#percentage of sunny days
sum(weather_daily$rainy)/(nrow(weather_daily))
#percentage of sunny days
sum(weather_daily$sunny)/(nrow(weather_daily))
weather_daily$cloudy = sapply(weather_daily$NM, FUN = function(x) ifelse(x > 7.75, 1, 0))
#count total number of cloudy days in time period
sum(weather_daily$cloudy)
#percentage of cloudy days
sum(weather_daily$cloudy)/(nrow(weather_daily))
#windy days (wind speed above 6 m/s)
weather_daily$windy = sapply(weather_daily$FX, FUN = function(x) ifelse(x > 6, 1, 0))
#count total number of windy days in time period
sum(weather_daily$windy)
#percentage of windy days
sum(weather_daily$windy)/(nrow(weather_daily))
#hot days (maximum temperature above 27 Â°C)
weather_daily$hot = sapply(weather_daily$TXK, FUN = function(x) ifelse(x > 27, 1, 0))
#count total number of hot days in time period
sum(weather_daily$hot)
#percentage of hot days
sum(weather_daily$hot)/(nrow(weather_daily))
## aggregate weather categories according to month-year combination
weather_days = weather_daily[, c(12:17)]
days         = data.frame(weather_days %>% group_by(date_id) %>% summarize_all(sum))
## aggregate weather categories according to month-year combination to create day counts per month
weather_days = weather_daily[, c(12:17)]
days         = data.frame(weather_days %>% group_by(date_id) %>% summarize_all(sum))
days
#arrange observations in correct time order
days$month = substr(days$date_id, 1, 2)
days$year  = substr(days$date_id, 4, 7)
days = days %>% arrange(year, month)
days
days = days %>% arrange(year, month)
#adding day counts of weather categories to respective observation in tourism data frame
tourism$rainy  = days$rainy
tourism$sunny  = days$sunny
tourism$cloudy = days$cloudy
tourism$windy  = days$windy
tourism$hot    = days$hot
## create data frame with monthly weather deviations ------------------------------
weather_num   = data.frame(tourism[, c(3:11, 13, 14)])
weather_means = data.frame(month_means[3:13])
#compare observations
data.frame(colnames(weather_num), colnames(weather_means))
#compare variable names
data.frame(colnames(weather_num), colnames(weather_means))
#repeat means for whole observation period
weather_means = do.call("rbind", replicate(8, weather_means, simplify = FALSE))
#calculate deviations
weather_deviation = weather_num - weather_means
#calculate deviations by substracting the actual observations from the corresponding monthwise mean values
weather_deviation = weather_num - weather_means
weather_deviation
## check for possible reductions of weather variables using factor analysis ------------------------------
#prepare seperate data frame for factor analysis
fa = data.frame(weather_num)
#normalize data frame
fa_n = scale(fa)
#create correlation matrix for numeric variables
fa_cor = round(cor(fa_n), 3)
#visualize correlations
corrplot(fa_cor, method="circle", type = "upper", col = brewer.pal(n=8, name="RdYlBu"))
#create screeplot to specify numbers of factors
plot(eigen(cor(fa[, 3:8]))$values, type = "o", col = "blue", pch = 16,
cex = 2, xlab = "Number of Factors", ylab = "Eigenvalues", lwd = 2)
abline(h = 1, lwd = 2, col = "red")
#extract factors
rotated_factor = fa(r = fa, nfactors = 2, fm = "pa", rotate = "varimax",
scores = "regression", min.err = 0.002)
print(rotated_factor, cut = 0, digits = 3)
#visualize factors
factor.plot(rotated_factor, labels=rownames(rotated_factor$loadings))
fa.diagram(rotated_factor, simple = FALSE, cut = 0, digits = 3, errors = TRUE)
fa_cor
#visualize correlations
corrplot(fa_cor, method="circle", type = "upper", col = brewer.pal(n=8, name="RdYlBu"))
#create screeplot to specify numbers of factors
plot(eigen(cor(fa[, 3:8]))$values, type = "o", col = "blue", pch = 16,
cex = 2, xlab = "Number of Factors", ylab = "Eigenvalues", lwd = 2)
abline(h = 1, lwd = 2, col = "red")
#extract factors
rotated_factor = fa(r = fa, nfactors = 2, fm = "pa", rotate = "varimax",
scores = "regression", min.err = 0.002)
print(rotated_factor, cut = 0, digits = 3)
#visualize factors
factor.plot(rotated_factor, labels=rownames(rotated_factor$loadings))
#visualize factors
factor.plot(rotated_factor, labels=rownames(rotated_factor$loadings))
fa.diagram(rotated_factor, simple = FALSE, cut = 0, digits = 3, errors = TRUE)
## use average temerature as single temperature variable
tourism[, c(5:6, 8, 10)] = NULL
## checking for outliers in guests and nights ------------------------------
ggplot(tourism, aes(y = guest_count, x = month_name, fill=month_name)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
stat_summary(fun.y=mean, geom="point", shape=5, size=4) +
ggtitle("Boxplots of the Number of Guest in Different Months Respectively") +
xlab("Month") +
ylab("Guests") +
theme_bw() +
theme(panel.border         = element_blank(),
panel.grid.major     = element_blank(),
panel.grid.minor     = element_blank(),
axis.line            = element_line(colour = "black"),
legend.justification = c(1,1),
legend.position      = c(1,1))
ggplot(tourism, aes(y = night_count, x = month_name, fill=month_name)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
stat_summary(fun.y=mean, geom="point", shape=5, size=4) +
ggtitle("Boxplots of the Number of Overnight Stays in Different Months Respectively") +
xlab("Month") +
ylab("Overnight Stays") +
theme_bw() +
theme(panel.border         = element_blank(),
panel.grid.major     = element_blank(),
panel.grid.minor     = element_blank(),
axis.line            = element_line(colour = "black"),
legend.justification = c(1,1),
legend.position      = c(1,1))
## extracting the outlier in April
april      = subset(tourism, month_name == "April")
april_outl = which(april$guest_count > mean(april$guest_count) + 2*sd(april$guest_count))
april[april_outl, ]
## calculate correlations between number of guests and nights ------------------------------
cor(tourism$guest_count, tourism$night_count)
## visualize distribution of guests counts ------------------------------
ggplot(tourism, aes(x = guest_count)) +
geom_histogram(aes(y=..density..), binwidth = 2500, colour="black", fill="white") +
geom_density(alpha=.15, fill="#31B404") +
ggtitle("Density Function and Histogramm of the Number of Guests Over the Observed Time Period") +
xlab("Guests") +
ylab("Density Function and Histogramm") +
theme_bw() +
theme(panel.border     = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line        = element_line(colour = "black"))
## visualize development of guests ------------------------------
ggplot(data = tourism, aes(x = date_beg, y = guest_count)) +
geom_point() +
stat_smooth(span=1/12, col = "#ff4d4d", se = FALSE) +
geom_smooth(col = "#99ccff", method = "lm", se = FALSE) +
ggtitle("Development of the Number of Guests") +
xlab("Guests") +
ylab("Number of Guests") +
expand_limits(y = 0) +
theme_bw() +
theme(panel.border        = element_blank(),
panel.grid.major     = element_blank(),
panel.grid.minor     = element_blank(),
axis.line            = element_line(colour = "black"),
legend.justification = c(1,0),
legend.position      = c(1,0))
## adding average number of days spent in region (overnight stays / guests) ------------------------------
tourism$avg_time = tourism$night_count/tourism$guest_count
## adding average number of days spent in region (overnight stays / guests) ------------------------------
tourism$avg_time = tourism$night_count/tourism$guest_count
tourism$avg_time
## creating overall monthly averages for tourism data ------------------------------
tourism_tab = data.table(tourism)
monthly     = data.frame(tourism_tab[,list(mean_guest  = mean(guest_count),
sd_guest    = sd(guest_count),
mean_nights = mean(night_count),
sd_nights   = sd(night_count)),
by = tourism$month_name])
colnames(monthly)[1] = "Month"
monthly
## comparing average guests per month to find out seasonal month ------------------------------
ggplot(data = monthly, aes(x = Month, y = mean_guest)) +
geom_bar(stat="identity") +
ggtitle("Average Number of Guests in Corresponding Month") +
xlab("Month") +
ylab("Guests") +
theme_bw() +
theme(panel.border     = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line        = element_line(colour = "black"))
#define season month (guests > 50000)
season_month = monthly$Month[which(monthly$mean_guest > 50000)]
#adding binary variable that specifies whether a month is in the season or not
season_check = function(x, y){
if(x %in% y){
return ("Yes")
}else{
return("No")
}
}
tourism$season = factor(sapply(as.list(tourism$month_name), season_check, season_month))
#comparing numbers in season and no season
mean(tourism$guest_count[tourism$season == "Yes"])
mean(tourism$guest_count[tourism$season == "No"])
##development of average number of nights per guest ------------------------------
ggplot(data = tourism, aes(x = date_beg, y = avg_time)) +
geom_point() +
stat_smooth(span=1/12, col = "#ff4d4d", se = FALSE) +
geom_smooth(col = "#99ccff", method = "lm", se = FALSE) +
ggtitle("Development of the average number of nights spent per guest") +
xlab("Time") +
ylab("Average number of nights") +
theme_bw() +
theme(panel.border     = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line        = element_line(colour = "black"))
## relationship between season and average nights per guest ------------------------------
cor(as.numeric(tourism$season), tourism$avg_time)
## calculate the absolute deveation of guests and overnigth stays from monthly mean ------------------------------
tourism$abs_guest_deviation =
tourism$guest_count - c(replicate(8, month_means$mean_guest_count))
tourism$abs_night_deviation =
tourism$night_count - c(replicate(8, month_means$mean_night_count))
## calculate relative deviation in percent ------------------------------
tourism$rel_guest_deviation = tourism$abs_guest_deviation/tourism$guest_count
tourism$rel_night_deviation = tourism$abs_night_deviation/tourism$night_count
## calculate annual growth of guests and nights compared to basis year = 2010 ------------------------------
obs             = data.frame("year" = format(tourism$date_beg, format = "%Y"))
obs$guest_count = tourism$guest_count
obs$night_count = tourism$night_count
years_index = obs %>%
group_by(year) %>%
summarize_all(sum)
years_index$guest_growth = (years_index$guest_count/years_index$guest_count[1])-1
years_index$night_growth = (years_index$night_count/years_index$night_count[1])-1
#plot growth rates compared to basis year
ggplot(years_index, aes(x = c(2010:2017))) +
geom_line(aes(y = guest_growth, color = "blue")) +
geom_line(aes(y = night_growth, color = "red")) +
ggtitle("Development of Growthrates for Guests and Overnight Stays") +
xlab("Year") +
ylab("Growth rate") +
scale_colour_manual(labels = c("Guests", "Nights"), values = c("blue", "red")) +
geom_point(aes(y = guest_growth, color = "blue")) +
geom_point(aes(y = night_growth, color = "red")) +
theme_bw() +
theme(panel.border         = element_blank(),
panel.grid.major     = element_blank(),
panel.grid.minor     = element_blank(),
axis.line            = element_line(colour = "black"),
legend.justification = c(1,0),
legend.position      = c(1,0),
legend.title         = element_blank())
years_index
## recalculate guests and nights "without" growth (in values of basis year 2010) ------------------------------
tourism$guest_basis = 0
j = 2010
for(i in c(1:8)){
tourism[which(as.numeric(format(tourism$date_beg, format = "%Y")) == j), ]$guest_basis =
tourism$guest_count[which(as.numeric(format(tourism$date_beg, format = "%Y")) == j)]/
(1+years_index$guest_growth[i])
j = j + 1
}
#for nights
tourism$night_basis = 0
j = 2010
for(i in c(1:8)){
tourism[which(as.numeric(format(tourism$date_beg, format = "%Y")) == j), ]$night_basis =
tourism$night_count[which(as.numeric(format(tourism$date_beg, format = "%Y")) == j)]/
(1+years_index$night_growth[i])
j = j + 1
}
## check adjusted development ------------------------------
ggplot(data = tourism, aes(x = date_beg, y = guest_basis)) +
geom_point() +
stat_smooth(span=1/12, col = "#ff4d4d", se = FALSE) +
geom_smooth(col = "#99ccff", method = "lm", se = FALSE) +
ggtitle("Development of the number of guests stays for the observed time period") +
xlab("Guests") +
ylab("Number of guests") +
expand_limits(y = 0) +
theme_bw() +
theme(panel.border     = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line        = element_line(colour = "black"))
## calculate the absolute deveation of guests and overnigth stays from monthly mean ------------------------------
tourism$abs_guest_deviation =
tourism$guest_count - c(replicate(8, month_means$mean_guest_count))
tourism$abs_night_deviation =
tourism$night_count - c(replicate(8, month_means$mean_night_count))
## calculate relative deviation in percent ------------------------------
tourism$rel_guest_deviation = tourism$abs_guest_deviation/tourism$guest_count
tourism$rel_night_deviation = tourism$abs_night_deviation/tourism$night_count
plot(tourism$abs_guest_deviation)
plot(tourism$rel_guest_deviation)
plot(tourism$abs_guest_deviation)
plot(tourism$rel_guest_deviation)
## check adjusted development ------------------------------
ggplot(data = tourism, aes(x = date_beg, y = guest_basis)) +
geom_point() +
stat_smooth(span=1/12, col = "#ff4d4d", se = FALSE) +
geom_smooth(col = "#99ccff", method = "lm", se = FALSE) +
ggtitle("Development of the number of guests stays for the observed time period") +
xlab("Guests") +
ylab("Number of guests") +
expand_limits(y = 0) +
theme_bw() +
theme(panel.border     = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line        = element_line(colour = "black"))
## calculate monthly means of newly generated basis variables ------------------------------
basis             = data.frame("month" = rep(seq(1:12), 8))
basis$guest_basis = tourism$guest_basis
basis$night_basis = tourism$night_basis
basis     = data.table(basis)
mon_basis = data.frame(basis[,list(mean_guest_basis  = mean(guest_basis),
sd_guest_basis    = sd(guest_basis),
mean_nights_basis = mean(night_basis),
sd_nights_basis   = sd(night_basis)),
by=basis$month])
## calculate the deveation of guests and overnigth stays from monthly mean of the basis observations ------------------------------
tourism$abs_guest_dev_basis = tourism$guest_basis - c(replicate(8, mon_basis$mean_guest_basis))
tourism$abs_night_dev_basis = tourism$night_basis - c(replicate(8, mon_basis$mean_nights_basis))
plot(tourism$abs_guest_dev_basis)
## find out relative deviation in percent from monthly mean of the basis observations ------------------------------
tourism$rel_guest_dev_basis = tourism$abs_guest_dev_basis/tourism$guest_basis
tourism$rel_night_dev_basis = tourism$abs_night_dev_basis/tourism$night_basis
plot(tourism$rel_guest_dev_basis)
#delete not relevant columns from tourism data frame
tourism$abs_guest_deviation = NULL
tourism$abs_night_deviation = NULL
tourism$rel_guest_deviation = NULL
tourism$rel_night_deviation = NULL
## extract the relevant data for the analysis
lr_data = data.frame("rel_guest_dev_basis" = tourism$rel_guest_dev_basis,
"rel_night_dev_basis" = tourism$rel_night_dev_basis,
"avg_time"            = tourism$avg_time,
"MO_TT"               = tourism$MO_TT,
"MO_SD_S"             = tourism$MO_SD_S,
"MO_RR"              = tourism$MO_RR)
## Stage 1: run linear regression with absolute values for weather variables ------------------------------
#1 average nights per guest
lm_avg_nights = lm(avg_time ~ .-rel_guest_dev_basis-rel_night_dev_basis, data = lr_data)
summary(lm_avg_nights)
#2 relative deviation of guests
lm_guest_dev = lm(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
summary(lm_guest_dev)
#3 relative deviation of nights
lm_night_dev = lm(rel_night_dev_basis ~ .-rel_guest_dev_basis-avg_time, data = lr_data)
summary(lm_night_dev)
## Stage 1: run linear regression with absolute values for weather variables ------------------------------
#1 average nights per guest
lm_avg_nights = lm(avg_time ~ .-rel_guest_dev_basis-rel_night_dev_basis, data = lr_data)
summary(lm_avg_nights)
#2 relative deviation of guests
lm_guest_dev = lm(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
summary(lm_guest_dev)
lm_guest_dev = lm(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
summary(lm_guest_dev)
lm_avg_nights = lm(avg_time ~ .-rel_guest_dev_basis-rel_night_dev_basis, data = lr_data)
summary(lm_avg_nights)
lm_guest_dev = lm(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
summary(lm_guest_dev)
#3 relative deviation of nights
lm_night_dev = lm(rel_night_dev_basis ~ .-rel_guest_dev_basis-avg_time, data = lr_data)
summary(lm_night_dev)
## Durbin-Watson Test for autocorrelation
dwtest(avg_time ~ .-rel_guest_dev_basis-rel_night_dev_basis, data = lr_data)
dwtest(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
dwtest(rel_night_dev_basis ~ .-rel_guest_dev_basis-avg_time, data = lr_data)
cor(lr_data[, 4:6])
#variance infation factor
car::vif(lm_avg_nights)
car::vif(lm_guest_dev)
car::vif(lm_night_dev)
bptest(lm_avg_nights)
bptest(lm_guest_dev)
bptest(lm_night_dev)
lr_data[, 4:6]   = NULL
lr_data$temp_dev = weather_deviation$MO_TT
lr_data$sun_dev  = weather_deviation$MO_SD_S
lr_data$rain_dev = weather_deviation$MO_RR
#1 average nights per guest
lm_avg_nights = lm(avg_time ~ .-rel_guest_dev_basis-rel_night_dev_basis, data = lr_data)
summary(lm_avg_nights)
#2 relative deviation of guests
lm_guest_dev = lm(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
summary(lm_guest_dev)
lm_night_dev = lm(rel_night_dev_basis ~ .-rel_guest_dev_basis-avg_time, data = lr_data)
summary(lm_night_dev)
dwtest(avg_time ~ .-rel_guest_dev_basis-rel_night_dev_basis, data = lr_data)
dwtest(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
dwtest(rel_night_dev_basis ~ .-rel_guest_dev_basis-avg_time, data = lr_data)
## check for multicollineraity
#correlations
cor(lr_data[, 4:6])
#variance infation factor
car::vif(lm_avg_nights)
car::vif(lm_guest_dev)
car::vif(lm_night_dev)
## check for heteroskedasticity
bptest(lm_avg_nights)
bptest(lm_guest_dev)
bptest(lm_night_dev)
lr_data$rainy  = days$rainy
lr_data$sunny  = days$sunny
lr_data$cloudy = days$cloudy
lr_data$windy  = days$windy
lr_data$hot    = days$hot
#1 average nights per guest
lm_avg_nights = lm(avg_time ~ .-rel_guest_dev_basis-rel_night_dev_basis, data = lr_data)
summary(lm_avg_nights)
#2 relative deviation of guests
lm_guest_dev = lm(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
summary(lm_guest_dev)
lm_night_dev = lm(rel_night_dev_basis ~ .-rel_guest_dev_basis-avg_time, data = lr_data)
summary(lm_night_dev)
dwtest(avg_time ~ .-rel_guest_dev_basis-rel_night_dev_basis, data = lr_data)
dwtest(rel_guest_dev_basis ~ .-rel_night_dev_basis-avg_time, data = lr_data)
dwtest(rel_night_dev_basis ~ .-rel_guest_dev_basis-avg_time, data = lr_data)
cor(lr_data[, 4:11])
#variance infation factor
car::vif(lm_avg_nights)
car::vif(lm_guest_dev)
car::vif(lm_night_dev)
bptest(lm_avg_nights)
bptest(lm_guest_dev)
bptest(lm_night_dev)
version
## set the working directory
wd = "C:/Users/timpe_000/Desktop/sPL-WISE-2018/SPL_WeatherTourism_01preparation"
setwd(wd)
## loading packages
library(dplyr)
library(ggplot2)
library(corrplot)
library(RColorBrewer)
library(psych)
library(data.table)
library(ggcorrplot)
library(stargazer)
library(lmtest)
library(caret)
library(dplyr)
library(ggplot2)
library(corrplot)
library(RColorBrewer)
library(psych)
library(data.table)
library(ggcorrplot)
library(stargazer)
library(lmtest)
library(caret)
## import monthly weather data ------------------------------
# read monthly weather data and transform into data frame
weather_all = data.frame(read.csv("weather_data.csv", header = TRUE, sep = ";", na.strings = "-999"))
source('C:/Users/timpe_000/Desktop/SPL-WISE-2018/SPL_WeatherTourism_01preparation/SPL_WeatherTourism_01preparation.R', echo=TRUE)
source('C:/Users/timpe_000/Desktop/SPL-WISE-2018/SPL_WeatherTourism_02weatherAnalysis/SPL_WeatherTourism_02weatherAnalysis.R', echo=TRUE)
source('C:/Users/timpe_000/Desktop/SPL-WISE-2018/SPL_WeatherTourism_03tourismAnalysis/SPL_WeatherTourism_03tourismAnalysis.R', echo=TRUE)
source('C:/Users/timpe_000/Desktop/SPL-WISE-2018/SPL_WeatherTourism_04regression/SPL_WeatherTourism_04regression.R', echo=TRUE)
weather_deviation
## check for possible reductions of weather variables using factor analysis ------------------------------
#prepare seperate data frame for factor analysis
fa = data.frame(weather_deviation)
#normalize data frame
fa_n = scale(fa)
#create correlation matrix for numeric variables
fa_cor = round(cor(fa_n), 3)
#visualize correlations
corrplot(fa_cor, method="circle", type = "upper", col = brewer.pal(n=8, name="RdYlBu"))
#create screeplot to specify numbers of factors
plot(eigen(cor(fa[, 3:8]))$values, type = "o", col = "blue", pch = 16,
cex = 2, xlab = "Number of Factors", ylab = "Eigenvalues", lwd = 2)
abline(h = 1, lwd = 2, col = "red")
#extract factors
rotated_factor = fa(r = fa, nfactors = 2, fm = "pa", rotate = "varimax",
scores = "regression", min.err = 0.002)
weather_deviation
## check for possible reductions of weather variables using factor analysis ------------------------------
#prepare seperate data frame for factor analysis
fa = data.frame(weather_deviation)
#normalize data frame
fa_n = scale(fa)
#create correlation matrix for numeric variables
fa_cor = round(cor(fa_n), 3)
fa_n
fa_cor
#visualize correlations
corrplot(fa_cor, method="circle", type = "upper", col = brewer.pal(n=8, name="RdYlBu"))
#create screeplot to specify numbers of factors
plot(eigen(cor(fa[, 3:8]))$values, type = "o", col = "blue", pch = 16,
cex = 2, xlab = "Number of Factors", ylab = "Eigenvalues", lwd = 2)
abline(h = 1, lwd = 2, col = "red")
#extract factors
rotated_factor = fa(r = fa, nfactors = 2, fm = "pa", rotate = "varimax",
scores = "regression", min.err = 0.002)
#extract factors
rotated_factor = fa(r = fa, nfactors = 1, fm = "pa", rotate = "varimax",
scores = "regression", min.err = 0.002)
fa
#extract factors
rotated_factor = fa(r = fa_n, nfactors = 2, fm = "pa", rotate = "varimax",
scores = "regression", min.err = 0.002)
